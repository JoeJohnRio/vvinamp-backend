
type Artist {
  id: ID!
  name: String!
  bio: String
  profileImage: String
  verified: Boolean!
  monthlyListeners: Int!
  albums: [Album!]!
  tracks: [Track!]!
}

type Genre {
  id: ID!
  name: String!
  description: String
  albums: [Album!]!
}

type Album {
  id: ID!
  title: String!
  artist: Artist!
  releaseDate: String!
  coverArt: String
  genre: Genre
  tracks: [Track!]!
}

type User {
  id: ID!
  username: String!
  email: String!
  passwordHash: String!
  profilePicture: String
  joinDate: String!
  subscriptionType: String
  lastLogin: String
  playlists: [Playlist!]!
  listeningHistory: [ListeningHistory!]!
  likedTracks: [UserLike!]!
  followedArtists: [UserFollow!]!
}

type Track {
  id: ID!
  title: String!
  duration: Int!
  audioFileUrl: String!
  streamCount: Int!
  album: Album!
  explicit: Boolean!
  lyrics: String
  releaseDate: String!
  artists: [TrackArtist!]!
}

type TrackArtist {
  track: Track!
  artist: Artist!
  role: String
}

type Playlist {
  id: ID!
  title: String!
  creator: User!
  createdAt: String!
  updatedAt: String
  isPublic: Boolean!
  coverImage: String
  tracks: [PlaylistTrack!]!
}

type PlaylistTrack {
  playlist: Playlist!
  track: Track!
  position: Int!
  addedAt: String!
}

type ListeningHistory {
  user: User!
  track: Track!
  playedAt: String!
  progress: Int!
}

type UserLike {
  user: User!
  track: Track!
  likedAt: String!
}

type UserFollow {
  user: User!
  artist: Artist!
}

type QuickPick {
  trackId: ID!
  title: String!
  artistName: String!
  playCount: Int!
  coverArt: String
}

#INPUT SECTION --------------------------------------------------------------------------------------

input Login {
  username: String!
  password: String!
}
type RegisterPayload {
  user: User!
}
type LoginPayload {
  viewer: User!
}
input RegisterInput {
  username: String!
  profilePicture: String!
  email: String!
  password: String!
  name: String!
  avatar: String
  roles: [String!]!
}

# QUERY SECTION ------------------------------------------------------------------------------

type Query {
  getAlbum(id: ID!): Album
  getAllGenres: [Genre!]!
  getQuickPicks(userId: ID!): [QuickPick!]!
}

# MUTATION SECTION ------------------------------------------------------------------------------

type Mutation {
  login(email: String!, password: String!): LoginPayload
  register(input: RegisterInput!): RegisterPayload
}